package com.dadi.nyd.service.impl;

import java.io.File;
import java.io.IOException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.dadi.auth.AuthUser;
import com.dadi.base.constants.RespContants;
import com.dadi.nyd.PrjConstants;
import com.dadi.nyd.dao.PrjAttachDao;
import com.dadi.nyd.dao.PrjInfoDao;
import com.dadi.nyd.entity.PrjAttach;
import com.dadi.nyd.entity.PrjInfo;
import com.dadi.nyd.service.PrjInfoService;
import com.dadi.sys.entity.Dict;
import com.dadi.sys.model.UserModel;
import com.dadi.sys.service.DictService;
import com.dadi.util.StringUtils;

@Service
public class PrjInfoServiceImpl implements PrjInfoService {
	@Autowired
	private PrjInfoDao prjInfoDao;
	@Autowired
	private PrjAttachDao prjAttachDao;
	@Autowired
	private DictService dictService;

	@Override
	public PrjInfo findById(String id) {
		return prjInfoDao.findOne(id);
	}

	@Override
	public Page<PrjInfo> findByFilter(Specification<PrjInfo> spec, Pageable pageRequest) {
		return prjInfoDao.findAll(spec, pageRequest);
	}

	@Override
	public List<PrjInfo> findByFilter(Specification<PrjInfo> spec, Sort sort) {
		return prjInfoDao.findAll(spec, sort);
	}

	@Override
	public List<PrjInfo> findByFilter(Specification<PrjInfo> spec) {
		return prjInfoDao.findAll(spec);
	}

	@Override
	public int delete(String id) {
		return prjInfoDao.deletById(id);
	}

	@Override
	public int batchDelete(String ids) {
		Set<String> idSet = StringUtils.sqlStrsToSet(ids);
		return prjInfoDao.batchDelete(idSet);
	}

	@Override
	public PrjInfo addPrjInfo(PrjInfo PrjInfo) {
		PrjInfo.setCreateUser(AuthUser.getCurrentUser());
		PrjInfo.setCreateDate(new Date());
		return prjInfoDao.save(PrjInfo);
	}

	@Override
	public PrjInfo updatePrjInfo(PrjInfo PrjInfo) {
		return prjInfoDao.saveAfterClearCache(PrjInfo);
	}

	@Override
	public Map<String, Object> upload(HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String, Object>();
		String prjId = request.getParameter("prjId");// 项目id
		String typeName = request.getParameter("typeName");// 类型名称
		try {
			CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
					request.getSession().getServletContext());
			PrjAttach prjAttach = new PrjAttach();
			PrjInfo prj = null;
			if (StringUtils.isValid(prjId)) {
				prj = findById(prjId);
			}
			Dict type = null;
			if(StringUtils.isValid(typeName)){
				type = dictService.findByName(typeName);
			}
			StringBuffer buffer = new StringBuffer();
			List<MultipartFile> files = new ArrayList<>();
			List<String> listPath = new ArrayList<>();
			if (multipartResolver.isMultipart(request)) { // 判断 request
				// 转换成多部分request
				MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
				files = multiRequest.getFiles("files"); // 取得上传文件的list
				if (files != null && files.size() != 0) {
					for (int i = 0; i < files.size(); i++) {
						// 是否有文件上传,即多部分请求
						MultipartFile filesI = files.get(i);
						// 取得当前上传文件的文件名称
						String myFileName = filesI.getOriginalFilename();
						// 如果名称不为“”,说明该文件存在，否则说明该文件不存在
						if (myFileName.trim() != "") {
							buffer.append(myFileName).append(",");
							// 重命名上传后的文件名
							String fileName = filesI.getOriginalFilename();
							fileName = URLDecoder.decode(fileName, "utf-8");
							System.out.println("fileName=" + fileName);

							String suffix = fileName.substring(fileName.lastIndexOf("."), fileName.length());
							String name = fileName.substring(0, fileName.lastIndexOf(".")) + "_"
									+ System.currentTimeMillis() + suffix;
							String path = PrjConstants.PRJ_DIR_ATTACH + name;
							File localFile = new File(path);
							filesI.transferTo(localFile);
							String savedPath = path.substring(PrjConstants.MEDIA_ROOT_PATH.length(), path.length());
							prjAttach.setAttachUrl(PrjConstants.PRJ_REQUEST_PATH + savedPath);
							prjAttach.setPrjInfo(prj);
							prjAttach.setAttachType(type);
							listPath.add(PrjConstants.PRJ_REQUEST_PATH + savedPath);
							prjAttachDao.saveWithUserAndDate(prjAttach);
						}
					}
				}
			}
			System.out.println("listPath=" + listPath);
			System.out.println("<===========================>");
			if (listPath.size() == 0) {
				map.put("code", RespContants.PARAM_ERROR);
				map.put("msg", "参数异常");
			} else {
				map.put("code", 200);
				map.put("msg", "上传成功");
				map.put("data", listPath);
			}

			// progressService.uploadAreaData(filePath, CgProcedureProgressId);

		} catch (IOException e) {
			e.printStackTrace();
			map.put("code", 400);
			map.put("msg", "服务器内部错误");
		} catch (Exception e) {
			e.printStackTrace();
			map.put("code", 400);
			map.put("msg", "服务器内部错误");
		}
		return map;
	}

	@Override
	public Integer deleteFile(String id) {
		Integer num = 0;
		if (StringUtils.isValid(id)) {
			num = prjAttachDao.deletById(id);
		}
		return num;
	}

	@Override
	public List<PrjAttach> getFlowAttach(String prjId) {
		Dict dict1 = dictService.findByName("");
		Dict dict2 = dictService.findByName("");
		 Set<String> typeIds = new HashSet<>();
		if(dict1!=null){
			typeIds.add(dict1.getId());
		}
		if(dict2!=null){
			typeIds.add(dict2.getId());
		}
		return prjAttachDao.findByPrjId(prjId, typeIds);
	}
}
